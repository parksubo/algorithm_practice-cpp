#include <iostream>
#include <vector>
#define NUMBER 12

using namespace std;

int a[] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
int tree[4 * NUMBER];	// 4를 곱하면 모든 범위를 커버할 수 있음 갯수에따라 최대 2의 제곱형태의 길이를 가짐

// start : 시작 인덱스, end : 끝 인덱스
int init(int start, int end, int node) {	// 초반 구간 합 트리를 만드는 함수
	if (start == end) return tree[node] = a[start]; // 리프노드의 경우
	int mid = (start + end) / 2;
	return tree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);
}

// start : 시작 인덱스, end : 끝 인덱스
// left, right : 구간 합을 구하고자 하는 범위
int sum(int start, int end, int node, int left, int right) {
	// 범위 밖에 있는 경우
	if (left > end || start > right) return 0;
	// 범위 안에 있는 경우에 구간 합 트리의 node번째 값 리턴
	if (left <= start && end <= right) return tree[node];
	// 그렇지 않다면 두 부분으로 나누어 합을 구함
	int mid = (start + end) / 2;
	return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);
}

// index : 구간 합을 수정하고자 하는 노드, diff : 노드의 변화 값
void update(int start, int end, int node, int index, int diff) {
	// 범위 밖에 있는 경우
	if (index < start || index > end) return;
	// 범위 안에 있으면 내려가며 해당 노드값에 영향을 받은 다른 노드들도 갱신
	tree[node] += diff;
	if (start == end) return;
	int mid = (start + end) / 2;
	update(start, mid, node * 2, index, diff);
	update(mid + 1, end, node * 2 + 1, index, diff);
}

int main() {
	// 구간 합 트리의 인덱스(node값) 을 제외하고는 모두 인덱스  0 ~ NUMBER-1
	// 구간합 트리 생성
	init(0, NUMBER -1, 1);

	cout << "1부터 12까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 0, 11) << endl;
	cout << "3부터 8까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 2, 7) << endl;
	cout << "2부터 4까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 1, 3) << endl;
	// 구간 합 갱신
	cout << "다섯 번째 원소를  -5만큼 수정" << endl;
	update(0, NUMBER - 1, 1, 4, -5);
	cout << "1부터 12까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 0, 11) << endl;
	cout << "3부터 8까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 2, 7) << endl;
	cout << "2부터 4까지의 구간 합 : " << sum(0, NUMBER - 1, 1, 1, 3) << endl;

	return 0;
}