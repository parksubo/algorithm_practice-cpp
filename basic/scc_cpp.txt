#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#define MAX 10001

using namespace std;

int id, d[MAX]; // 각 노드마다의 고유번호, 고유번호를 저장한 배열
bool finished[MAX]; // 특정한 노드의 DFS가 끝났는지 확인하는 변수
vector<int> a[MAX]; // 행 가변, 열 MAX의 vector 생성
vector<vector<int>> SCC; // 사이클 집합들을 모아놓은 vector
stack<int> s;

// dfs는 총 정점의 갯수만큼 실행

int dfs(int x) {
	d[x] = ++id;	// d[x] 에 고유 부모번호 지정
	s.push(x);	// 스택에 삽입
	int parent = d[x];

	for (int i = 0; i < a[x].size(); i++) {
		int y = a[x][i];
		if (d[y] == 0) {	// y가 아직 방문하지 않은 노드라면
			parent = min(parent, dfs(y));	// 현 parent 값과 dfs(y) 값 중 더 작은 것을 부모로 설정 
		}
		else if (!finished[y]) {	// y를 방문을 했지만 y에 관한 사이클 처리가 아직 끝나지 않았다면
			parent = min(parent, d[y]);
		}
	}

	if (parent == d[x]) {	// 사이클 처리를 모두 끝내고 parent가 자기자신(x)의 고유넘버라면
		vector<int> scc;
		while (1) {
			int t = s.top();
			s.pop();
			scc.push_back(t);
			finished[t] = true;
			if (t == x) break; // 자기 자신까지 모두 push 했다면 break;
		}
		SCC.push_back(scc);
	}
	return parent; // 부모값을 리턴
}

int main() {

	int v = 11; // 정점의 개수

	a[1].push_back(2);
	a[2].push_back(3);
	a[3].push_back(1);
	a[4].push_back(2);
	a[4].push_back(5);
	a[5].push_back(7);
	a[6].push_back(5);
	a[7].push_back(6);
	a[8].push_back(5);
	a[8].push_back(9);
	a[9].push_back(10);
	a[10].push_back(11);
	a[11].push_back(3);
	a[11].push_back(8);

	for (int i = 1; i <= v; i++) {
		if (d[i] == 0) dfs(i);
	}


	cout << "SCC의 갯수 : " << SCC.size() << endl;
	for (int i = 0; i < SCC.size(); i++) {
		cout << i + 1 << "번째 SCC : " << ' ';
		for (int j = 0; j < SCC[i].size(); j++) {
			cout << SCC[i][j] << ' ';
		}
		cout << endl;
	}



	return 0;
}